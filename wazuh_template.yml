AWSTemplateFormatVersion: 2010-09-09

Description: >
  Devel-demo testing environment

Mappings:
  RegionMap:
    us-west-1:
      HVM64: ami-0019ef04ac50be30f
      HVMUBUNTU64: ami-06397100adf427136
      HVMCENTOS7: ami-074e2d6769f445be5
      HVMREDHAT7: ami-18726478
      HVMDEBIAN: ami-0343ae47
      HVMWINDOWS: ami-0811910c9eeebb49b
  SubnetConfig:
    WazuhVpc:
      CIDR: 10.0.0.0/16
    SubnetWazuh:
      CIDR: 10.0.0.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "AWS environment"
        Parameters:
          - AvailabilityZone
          - KeyPairName
      - 
        Label:
          default: "Version and instance types"
        Parameters:
          - ElasticWazuhVersion
          - WazuhInstanceType
          - IndexerType
          - KibanaInstanceType
          - SshUsername
          - SshPassword
      - 
        Label:
          default: "Wazuh configuration"
        Parameters:
          - WazuhServerPort
          - WazuhRegistrationPort
          - WazuhRegistrationPassword
          - WazuhApiPort
          - WazuhApiAdminUsername
          - WazuhApiAdminPassword
          - WazuhClusterKey
      -
        Label:
          default: "Kibana configuration"
        Parameters:
          - KibanaPort
          - KibanaUsername
          - KibanaPassword
      -
        Label:
          default: "Splunk configuration"
        Parameters:
          - SplunkPort
          - SplunkUsername
          - SplunkPassword

Parameters:

  # AWS environment 
  AvailabilityZone:
    Description: Select an availability zone for the VPC
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    Description: Existing EC2 key pair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  

  SshUsername:
    Default: wazuh
    Description: SSH username
    Type: String
    MinLength: '5'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 5. Maximum length 32.
  SshPassword:
    Description: SSH Password
    NoEcho: 'True'
    Type: String
    MinLength: '8'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 8. Maximum length 64.

  # Version and instance types
  ElasticWazuhVersion:
    AllowedValues:
      - 6.6.1_3.9.0
    ConstraintDescription: Format is ElasticVersion_WazuhVersion
    Default: 6.6.1_3.9.0
    Description: Elastic and Wazuh versions to be installed
    Type: String
  WazuhInstanceType:
    AllowedValues:
      - t2.medium
    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Wazuh instance
    Type: String
  IndexerType:
    AllowedValues:
      - t2.medium
    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Elastic/Splunk instance
    Type: String
  KibanaInstanceType:
    AllowedValues:
      - t2.medium
    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Kibana instance
    Type: String

  # Wazuh configuration
  WazuhServerPort:
    Default: '1514'
    Description: Port for agents connection with Wazuh server
    Type: String
  WazuhRegistrationPort:
    Default: '1515'
    Description: Port for agents registration with Wazuh server
    Type: String
  WazuhRegistrationPassword:
    Description: Password for Wazuh agents registration
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiPort:
    Default: '55000'
    Description: Port for Wazuh server API
    Type: String
  WazuhApiAdminUsername:
    Default: admin
    Description: Admin username for Wazuh API
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhApiAdminPassword:
    Description: Admin password for Wazuh API
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  WazuhClusterKey:
    Description: Key used for Wazuh servers cluster
    Default: 'abcdefghijklmnopqrstuvwxyz012345'
    Type: String
    MinLength: '32'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Any alphanumeric string of 32 characters

  # Kibana configuration
  KibanaPort:
    Default: '443'
    Description: Port for Kibana WUI
    Type: String
  KibanaUsername:
    Default: wazuh
    Description: Username for Kibana access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  KibanaPassword:
    Description: Password for Kibana access
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters

  # Splunk configuration
  SplunkPort:
    Default: '8000'
    Description: Port for Splunk WUI
    Type: String
  SplunkUsername:
    Default: admin
    Description: Username for Splunk access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  SplunkPassword:
    Description: Password for Splunk access
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters


Resources:

  # Network resources
  WazuhVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - WazuhVpc
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
  SubnetWazuh:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WazuhVpc
      CidrBlock: !FindInMap
        - SubnetConfig
        - SubnetWazuh
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetWazuh'

  # Internet access
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WazuhVpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WazuhVpc
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetWazuhPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWazuh
      RouteTableId: !Ref PublicRouteTable

  # Instance security groups
  ElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticsearch security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElasticSecurityGroup'
  KibanaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kibana security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KibanaPort
          ToPort: !Ref KibanaPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KibanaSecurityGroup'
  SplunkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Splunk security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9997
          ToPort: 9997
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SplunkSecurityGroup'
  

  # Elasticsearch load balancer
  ElbElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Elasticsearch security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbElasticSecurityGroup'
  ElbElastic:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-demodevel-elk'
      Scheme: internal
      Subnets:
        - !Ref SubnetWazuh
      SecurityGroups:
        - !Ref ElbElasticSecurityGroup
      ConnectionSettings:
        IdleTimeout: '300'
      HealthCheck:
        Target: !Join
          - ''
          - - 'HTTP:'
            - '9200'
            - /_cluster/health
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '60'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: '9200'
          InstancePort: '9200'
          Protocol: TCP

  # Logstash load balancer
  ElbLogstashSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Logstash security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbLogstashSecurityGroup'
  ElbLogstash:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-demodevel-logstash'
      Scheme: internal
      Subnets:
        - !Ref SubnetWazuh
      SecurityGroups:
        - !Ref ElbLogstashSecurityGroup
      ConnectionSettings:
        IdleTimeout: '300'
      HealthCheck:
        Target: TCP:5000
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '60'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: '5000'
          InstancePort: '5000'
          Protocol: TCP

  # Kibana load balancer
  ElbKibanaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Kibana security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KibanaPort
          ToPort: !Ref KibanaPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbKibanaSecurityGroup'
  ElbKibana:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-demodevel-kibana'
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetWazuh
      SecurityGroups:
        - !Ref ElbKibanaSecurityGroup
      ConnectionSettings:
        IdleTimeout: '1200'
      Instances:
        - Ref: KibanaInstance
      HealthCheck:
        Target: !Sub 'TCP:${KibanaPort}'
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '60'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: 22 
          InstancePort: 22 
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: !Ref KibanaPort
          InstancePort: !Ref KibanaPort
          Protocol: TCP
          InstanceProtocol: TCP

  # Splunk load balancer
  ElbSplunkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Splunk security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbSplunkSecurityGroup'
  ElbSplunk:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-demodevel-splunklb'
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetWazuh
      SecurityGroups:
        - !Ref ElbSplunkSecurityGroup
      ConnectionSettings:
        IdleTimeout: '1200'
      Instances:
        - Ref: SplunkInstance
      HealthCheck:
        Target: !Sub 'TCP:${SplunkPort}'
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '60'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: 22 
          InstancePort: 22 
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: 8000
          InstancePort: 8000
          Protocol: TCP
          InstanceProtocol: TCP
  WazuhSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Wazuh security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref WazuhServerPort
          ToPort: !Ref WazuhServerPort
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: !Ref WazuhRegistrationPort
          ToPort: !Ref WazuhRegistrationPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1516
          ToPort: 1516
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: !Ref WazuhApiPort
          ToPort: !Ref WazuhApiPort
          CidrIp: !FindInMap
            - SubnetConfig
            - WazuhVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WazuhSecurityGroup'
  # Wazuh server load balancer
  ElbWazuhSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Wazuh security group
      VpcId: !Ref WazuhVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref WazuhServerPort
          ToPort: !Ref WazuhServerPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbWazuhSecurityGroup'
  ElbWazuh:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: !Sub '${AWS::StackName}-demodevel-wazuhlb'
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetWazuh
      SecurityGroups:
        - !Ref ElbWazuhSecurityGroup
      ConnectionSettings:
        IdleTimeout: '1200'
      Instances:
        - Ref: WazuhMasterInstance
        - Ref: WazuhWorkerInstance
      HealthCheck:
        Target: !Sub 'TCP:${WazuhServerPort}'
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '60'
        Timeout: '5'
      Listeners:
        - LoadBalancerPort: !Ref WazuhServerPort
          InstancePort: !Ref WazuhServerPort
          Protocol: TCP
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '600'


  # IAM role and profile
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-GetCloudformation'
          PolicyDocument:
            Statement:
              - Action:
                  - 'cloudformation:DescribeStack*'
                  - 'cloudformation:DescribeStackResource*'
                  - 'cloudformation:List*'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${AWS::StackName}-DescribeInstances'
          PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
                Effect: Allow
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InstanceRole

  # Elasticsearch instances
  ElasticAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetWazuh
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ElasticLaunchConfiguration
      MinSize: '3'
      MaxSize: '6'
      DesiredCapacity: '3'
      LoadBalancerNames:
        - !Ref ElbElastic
        - !Ref ElbLogstash
      Tags:
        - Key: Name
          Value: demo-devel-elasticsearch
          PropagateAtLaunch: true
        - Key: Creator
          Value: !Ref KeyPairName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '3'
  CpuUtilization:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref ElasticAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
  ElasticLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - ElasticFiles
            - ElasticInstall
        ElasticFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_elasticsearch.yml:
              content: !Sub |
                cluster.name: wazuh_elastic
                path.data: /mnt/ephemeral/elasticsearch/lib
                path.logs: /mnt/ephemeral/elasticsearch/log
                bootstrap.memory_lock: true
                network.host: _ec2_
                discovery.zen.minimum_master_nodes: 2
                discovery.zen.hosts_provider: ec2
                discovery.ec2.groups: ${ElasticSecurityGroup}
                discovery.ec2.host_type: private_ip
                discovery.ec2.endpoint: ec2.${AWS::Region}.amazonaws.com
              mode: '000644'
              owner: root
              group: root
            /tmp/wazuh_cf_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/elastic/wazuh_cf_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_elastic.sh
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !Ref IndexerType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref ElasticSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticLaunchConfiguration --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticLaunchConfiguration --region ${AWS::Region}


  # Kibana instance
  KibanaInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KibanaInstallationSet:
            - KibanaFiles
            - KibanaInstall
        KibanaFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                KibanaPort: ${KibanaPort}
                KibanaUsername: ${KibanaUsername}
                KibanaPassword: ${KibanaPassword}
                WazuhApiAdminUsername: foo
                WazuhApiAdminPassword: bar
                WazuhApiPort: 55000
                WazuhMasterIP: 10.0.0.83
                ElbElasticDNS: ${ElbElastic.DNSName}
                ElbLogstashDNS: ${ElbLogstash.DNSName}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_elasticsearch.yml:
              content: !Sub |
                cluster.name: wazuh_elastic
                path.data: /var/lib/elasticsearch
                path.logs: /var/log/elasticsearch
                bootstrap.memory_lock: true
                network.host: _ec2_
                discovery.zen.minimum_master_nodes: 2
                discovery.zen.hosts_provider: ec2
                discovery.ec2.groups: ${ElasticSecurityGroup}
                discovery.ec2.host_type: private_ip
                discovery.ec2.endpoint: ec2.${AWS::Region}.amazonaws.com
                node.master: false
                node.data: false
                node.ingest: false
              mode: '000644'
              owner: root
              group: root
            /tmp/wazuh_cf_kibana.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/elastic/wazuh_cf_kibana.sh
              mode: '000700'
              owner: root
              group: root
        KibanaInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_kibana.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref KibanaInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-kibana
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KibanaInstance --configsets KibanaInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Kibana --region ${AWS::Region}

  KibanaInstanceEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'KibanaSecurityGroup']
      

  # Splunk instance
  SplunkInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SplunkInstallationSet:
            - SplunkFiles
            - SplunkInstall
        SplunkFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                SplunkPort: ${SplunkPort}
                SplunkUsername: ${SplunkUsername}
                SplunkPassword: ${SplunkPassword}
                WazuhApiAdminUsername: foo
                WazuhApiAdminPassword: bar
                WazuhApiPort: 55000
                WazuhMasterIP: 10.0.0.83
              mode: '000600'
              owner: root
              group: root

            /tmp/wazuh_cf_splunk.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/splunk/wazuh_cf_splunk.sh
              mode: '000700'
              owner: root
              group: root
        SplunkInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_splunk.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref SplunkInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-splunk
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource SplunkInstance --configsets SplunkInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Splunk --region ${AWS::Region}

  SplunkInstanceEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'SplunkSecurityGroup']

  # Wazuh master instance
  WazuhMasterInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhApiAdminUsername: ${WazuhApiAdminUsername}
                WazuhApiAdminPassword: ${WazuhApiAdminPassword}
                WazuhApiPort: ${WazuhApiPort}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhClusterKey: ${WazuhClusterKey}
                ElbLogstashDNS: ${ElbLogstash.DNSName}
                SplunkIP: !GetAtt SplunkInstance.PrivateIp

              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_master.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_master.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_master.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhMasterInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-master
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WazuhMasterInstance --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WazuhMasterInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhMasterInstanceEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'WazuhSecurityGroup']

  # Wazuh worker instance
  WazuhWorkerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhClusterKey: ${WazuhClusterKey}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbLogstashDNS: ${ElbLogstash.DNSName}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_worker.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_worker.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_worker.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhWorkerInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-worker
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WazuhWorkerInstance --configsets WazuhInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WazuhWorkerInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhWorkerInstanceEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet: [!Ref 'WazuhSecurityGroup']

  AgentInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbWazuhDNS: ${ElbWazuh.DNSName}
                AgentName: AmazonLinux
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_agent.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_agent.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_agent.sh
      'AWS::CloudFormation::Designer':
        id: ebbc5d7f-ce5b-43f0-b5d3-04c0c4b93ced
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - Ref: 'AWS::Region'
        - HVM64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhAgentInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-agent-amazonlinux
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource
          AgentInstance --configsets WazuhInstallationSet --region
          ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AgentInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhAgentInstanceEth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet:
        - !Ref WazuhSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac938975-e7f3-43cb-adf4-af2737efb52d

  

  AgentInstanceRedhat:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbWazuhDNS: ${ElbWazuh.DNSName}
                AgentName: RHEL7
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_agent.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_agent.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_agent.sh
      'AWS::CloudFormation::Designer':
        id: ebbc5d7f-ce5b-43f0-b5d3-04c0c4b93ced
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - Ref: 'AWS::Region'
        - HVMREDHAT7
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhAgentInstanceRedhatEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-agent-amazonlinux
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource
          AgentInstance --configsets WazuhInstallationSet --region
          ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AgentInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhAgentInstanceRedhatEth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet:
        - !Ref WazuhSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac938975-e7f3-43cb-adf4-af2737efb52d

  

  AgentInstanceCentos:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPort: ${WazuhRegistrationPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbWazuhDNS: ${ElbWazuh.DNSName}
                AgentName: Centos7
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_agent.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_agent.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_agent.sh
      'AWS::CloudFormation::Designer':
        id: ebbc5d7f-ce5b-43f0-b5d3-04c0c4b93ced
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - Ref: 'AWS::Region'
        - HVMCENTOS7
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhAgentInstanceCentosEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-agent-amazonlinux
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource
          AgentInstance --configsets WazuhInstallationSet --region
          ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AgentInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhAgentInstanceCentosEth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet:
        - !Ref WazuhSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac938975-e7f3-43cb-adf4-af2737efb52d



        
  AgentUbuntuInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbWazuhDNS: ${ElbWazuh.DNSName}
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_agent.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_agent_ubuntu.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_agent_ubuntu.sh
      'AWS::CloudFormation::Designer':
        id: ebbc5d7f-ce5b-43f0-b5d3-04c0c4b93ced
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - Ref: 'AWS::Region'
        - HVMUBUNTU64
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhAgentUbuntuInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-agent-ubuntu
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource
          AgentUbuntuInstance --configsets WazuhInstallationSet --region
          ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AgentUbuntuInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhAgentUbuntuInstanceEth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet:
        - !Ref WazuhSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac938975-e7f3-43cb-adf4-af2737efb52d



  AgentDebianInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          WazuhInstallationSet:
            - WazuhFiles
            - WazuhInstall
        WazuhFiles:
          files:
            /tmp/wazuh_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Wazuh: ${ElasticWazuhVersion}
                WazuhServerPort: ${WazuhServerPort}
                WazuhRegistrationPassword: ${WazuhRegistrationPassword}
                WazuhMasterIP: ${WazuhMasterInstance.PrivateIp}
                ElbWazuhDNS: ${ElbWazuh.DNSName}
                AgentName: Debian
              mode: '000600'
              owner: root
              group: root
            /tmp/wazuh_cf_agent.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/wazuh/wazuh-cloudformation/devel/wazuh/wazuh_cf_agent_ubuntu.sh
              mode: '000700'
              owner: root
              group: root
        WazuhInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/wazuh_cf_agent_ubuntu.sh
      'AWS::CloudFormation::Designer':
        id: ebbc5d7f-ce5b-43f0-b5d3-04c0c4b93ced
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - Ref: 'AWS::Region'
        - HVMDEBIAN
      InstanceType: !Ref WazuhInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WazuhAgentDebianInstanceEth0
          DeviceIndex: 0
          

      Tags:
        - Key: Name
          Value: demo-devel-agent-debian
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource
          AgentDebianInstance --configsets WazuhInstallationSet --region
          ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          AgentDebianInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  WazuhAgentDebianInstanceEth0:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref SubnetWazuh
      GroupSet:
        - !Ref WazuhSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac938975-e7f3-43cb-adf4-af2737efb52d







Outputs:
  ElasticWazuhVersion:
    Description: Elastic Stack and Wazuh versions
    Value: !Ref ElasticWazuhVersion
  SshUsername:
    Description: SSH Username
    Value: !Ref SshUsername
  KibanaPort: 
    Description: Port number for Kibana WUI access
    Value: !Ref KibanaPort
  KibanaUsername:
    Description: Username for Kibana WUI
    Value: !Ref KibanaUsername
  KeyPairName:
    Description: Key pair used for SSH access
    Value: !Ref KeyPairName
  IndexerType:
    Description: Elasticsearch data nodes instance type
    Value: !Ref IndexerType
  KibanaInstanceType:
    Description: Kibana server instance type
    Value: !Ref KibanaInstanceType
